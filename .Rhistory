31
# generate pairs of x-y values
x = seq(-50, 50, by = 1)
y = -(x^2)
# set graphic parameters
op = par(bg = 'black', mar = rep(0.5, 4))
# Plot
plot(y, x, type = 'n')
lines(y, x, lwd = 2*runif(1), col = hsv(0.08, 1, 1, alpha = runif(1, 0.5, 0.9)))
for (i in seq(10, 2500, 10))
{
lines(y-i, x, lwd = 2*runif(1), col = hsv(0.08, 1, 1, alpha = runif(1, 0.5, 0.9)))
}
for (i in seq(500, 600, 10))
{
lines(y - i, x, lwd = 2*runif(1), col = hsv(0, 1, 1, alpha = runif(1, 0.5, 0.9)))
}
for (i in seq(2000, 2300, 10))
{
lines(y - i, x, lwd = 2*runif(1), col = hsv(0, 1, 1, alpha = runif(1, 0 .5, 0.9)))
}
for (i in seq(100, 150, 10))
{
lines(y - i, x, lwd = 2*runif(1), col = hsv(0, 1, 1, alpha = runif(1, 0.5, 0.9)))
}
# signature
legend("bottomright", legend="Â© Gaston Sanchez", bty = "n", text.col="gray70")
for (i in seq(2000, 2300, 10))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
# generate pairs of x-y values
x = seq(-50, 50, by = 1)
y = -(x^2)
# set graphic parameters
op = par(bg = 'black', mar = rep(0.5, 4))
# Plot
plot(y, x, type = 'n')
lines(y, x, lwd = 2*runif(1), col = hsv(0.08, 1, 1, alpha = runif(1, 0.5, 0.9)))
for (i in seq(10, 2500, 10))
{
lines(y-i, x, lwd = 2*runif(1), col = hsv(0.08, 1, 1, alpha = runif(1, 0.5, 0.9)))
}
for (i in seq(500, 600, 10))
{
lines(y - i, x, lwd = 2*runif(1), col = hsv(0, 1, 1, alpha = runif(1, 0.5, 0.9)))
}
for (i in seq(2000, 2300, 10))
{
lines(y - i, x, lwd = 2*runif(1), col = hsv(0, 1, 1, alpha = runif(1, 0 .5, 0.9)))
}
for (i in seq(100, 150, 10))
{
lines(y - i, x, lwd = 2*runif(1), col = hsv(0, 1, 1, alpha = runif(1, 0.5, 0.9)))
}
# signature
legend("bottomright", legend="shut up", bty = "n", text.col="gray70")
1
2
3
4
par(mar=c(0,0,0,0))
pie(abs(rnorm(100)) , radius=10 , border="transparent" , xlim=c(0,5) )
1
2
3
4
par(mar=c(0,0,0,0))
pie(abs(rnorm(100)) , radius=10 , border="NONE" , xlim=c(0,5) )
1
2
3
4
par(mar=c(0,0,0,0))
pie(abs(rnorm(100)) , radius=10 , xlim=c(0,5) )
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(0.5, 4))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(299, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(299, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(299, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(299))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 20000), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 3000)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 3000)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "black", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(-0.5, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(1, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(1, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(5, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
colors()
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "gray14", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.1), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.78), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.78), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.2), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.45, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.12, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.8, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 5, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, .5, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
# generate pairs of x-y values
x1 = c(seq(0, pi, length = 50), seq(pi, 2*pi, length = 50))
y1 = cos(x1) / sin(x1)
x2 = seq(1.02 * 2 * pi + pi/2, 4*pi + pi/2, length = 50)
y2 = tan(x2)
# set graphical parameters
op = par(bg="black", mar=rep(.5,4))
# plot
plot(c(x1, x2), c(y1, y2), type = "n", ylim = c(-11, 11))
for (i in seq(-10, 10, length = 100))
{
lines(x1, y1 + i, col = hsv(runif(1,.65,.7), 1, 1, runif(1,.7)),
lwd = 4 * runif(1, 0.3))
lines(x2, y2 + i, col = hsv(runif(1,.65,.7), 1, 1, runif(1,.7)),
lwd = 4 * runif(1, 0.3))
}
help("read.csv")
# mandelbrot_naive.R
# "Naive" implementation of Mandelbrot Set in R
# Myles Harrison
# http://www.everydayanalytics.ca
# parameters
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
library(ggplot2)
library(ggplot2)
library("ggplot2", lib.loc="~/R/R-3.2.3/library")
library(slidify)
install.packages("slidify")
install_github(c("hilaryparker/explainr", "hilaryparker/catsplainr"))
install.packaages("install_github")
install.packages("install_github")
install_github(c("hilaryparker/explainr", "hilaryparker/catsplainr"))
library(install_github)
library(tufte)
help(tufte)
??tufter
??tufte
&nbsp;
library(slidify)
slidify("index.Rmd")
library(tufte)
library(tufte)
library(tufte)
get(wd)
getwd()
setwd("C:/Users/jquan01/Desktop/IR-Data")
getwd()
